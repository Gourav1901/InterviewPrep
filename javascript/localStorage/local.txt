
What is Local Storage?
Local Storage is a feature in web browsers that allows you to store data directly on the user's computer. This data is stored in the form of key-value pairs and is persistent, meaning it remains even after the browser is closed or the computer is restarted.

Key Points:

Size: It can store up to 5-10 MB of data (depending on the browser).
Scope: Data stored is specific to a particular website and cannot be accessed by other websites.
Persistence: Data remains until explicitly deleted by the user or the website's code.


Example of Using Local Storage
Let's say you want to store a user's theme preference (like dark or light mode) in Local Storage.


// Set the theme preference to 'dark'
localStorage.setItem('theme', 'dark');


// Get the theme preference from local storage
const theme = localStorage.getItem('theme');
console.log(theme); // Outputs: 'dark'


// Remove the theme preference from local storage
localStorage.removeItem('theme');


// Clear all data stored in local storage
localStorage.clear();


Common Interview Questions on Local Storage
What is Local Storage and how does it differ from Session Storage?

Local Storage persists even after the browser is closed, while Session Storage only lasts until the browser or tab is closed.

How much data can you store in Local Storage?

Typically, 5-10 MB per domain.

What are the security concerns associated with Local Storage?

Data stored in Local Storage is accessible via JavaScript, so it is vulnerable to XSS (Cross-Site Scripting) attacks. It should not be used to store sensitive information like passwords.


Can you store objects or arrays in Local Storage?

Local Storage only stores strings. To store objects or arrays, you need to convert them to a string using JSON.stringify() and parse them back using JSON.parse() when retrieving.


How can you handle the absence of Local Storage in a browser?

You can check for support using if (typeof(Storage) !== "undefined"), and provide fallback mechanisms like cookies if Local Storage is not supported.